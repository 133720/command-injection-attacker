/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.co.pentest.SHELLING;

import burp.IHttpRequestResponse;
import java.awt.BorderLayout;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.HierarchyEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BoxLayout;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;

import javax.swing.JLabel;
import javax.swing.JList;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

/**
 *
 * @author ewilded
 */
public final class ShellingPanel extends JPanel {
    static String PROMPT_TITLE = "SHELLING extension";
    protected JComboBox targetOSCombo; 
    protected JCheckBox payloadMarkingBox;
    protected String targetOS="nix"; // possible values: nix,win,all
    protected String command;
    protected JLabel argument;
    protected JTextArea argumentField;        
    
    protected String byteGeneratorRange;   

    protected JTextArea logOutput;
    protected JList encodeList;

    PrintWriter stdout;

    protected void appendListData(JList list, String[] items)
    {
        ArrayList tmp = new ArrayList();

         for (int i=0; i < list.getModel().getSize(); i++) {
            String elem = (String) list.getModel().getElementAt(i);           
            tmp.add(elem);
        }
        for(String item: items)
        {
            if(!tmp.contains(item)) tmp.add(item);
        }
        list.setListData(tmp.toArray());
    }
    private void removeFromListData(JList list, String item)
    {
        ArrayList tmp = new ArrayList();

         for (int i=0; i < list.getModel().getSize(); i++) {
            String elem = (String) list.getModel().getElementAt(i); 
            if(!elem.equals(item)) tmp.add(elem);
        }
        list.setListData(tmp.toArray());
    }

    private void initiateEncodings() // same as clear, no encoding by default
    {
        String empty[] = {"None"};
        encodeList.setListData(empty);
    }

    ShellingPanel() {
        stdout = new PrintWriter(SHELLING.callbacks.getStdout(), true);
        setLayout(new BorderLayout());
        // CREATE THE PANEL SKELETON
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
        mainPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
       
        // TARGET OS SECTION START        
        JLabel targetOSLabel = new JLabel("Target OS");
        targetOSCombo = new JComboBox();
        String[] OSNames= { "Nix (default)", "Windows", "All"};
        for (String OSName : OSNames) {
            targetOSCombo.addItem(OSName);
        }
        targetOSCombo.addActionListener((ActionEvent e) -> {
            switch(targetOSCombo.getSelectedIndex())
            { 
                case 0 : { this.targetOS="nix"; break;}
                case 1 : { this.targetOS="win"; break;}
                case 2 : { this.targetOS="all"; break;}
            }
        });        
       
        JLabel payloadMarkingLabel = new JLabel();
        payloadMarkingLabel.setText("Payload maarking");
        payloadMarkingBox = new JCheckBox();
        //optimizeDocrootTraversalsBox
        payloadMarkingBox.setSelected(true);

        
        // EVASIVE ENCODING SECTION START
        JLabel encodeLabel = new JLabel();
        encodeLabel.setText("Output encodings to use:");
        encodeList = new JList();
        encodeList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);        
        encodeList.setLayoutOrientation(JList.VERTICAL);
        encodeList.setVisibleRowCount(10);
        this.initiateEncodings();
        JScrollPane encodeListScroller = new JScrollPane(encodeList);
        encodeListScroller.setPreferredSize(new Dimension(150, 100));

        JButton encodeRemoveButton = new JButton("Remove");
        encodeRemoveButton.addActionListener((ActionEvent e) -> {                
                if(encodeList.getSelectedIndex()!=-1) removeFromListData(encodeList,(String)encodeList.getModel().getElementAt(encodeList.getSelectedIndex()));                                
                if(encodeList.getModel().getSize()==0) this.initiateEncodings();
        });        
        JButton encodeClearButton = new JButton("Clear");
        encodeClearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                initiateEncodings();
            }
        });        
        
        JComboBox encodingsToUse = new JComboBox();
        String[] encodeLabels= { "None (default)", "URL", "Double URL"};
        for (String encodeName : encodeLabels) {
            encodingsToUse.addItem(encodeName);
        }
        encodingsToUse.addActionListener((ActionEvent e) -> {
            switch(encodingsToUse.getSelectedIndex())
            { 
                case 0 : { 
                    this.initiateEncodings(); break;
                }
                case 1 : { String n[]={"URL"}; appendListData(encodeList,n); break;}
                case 2 : { String n[]={"Double URL"}; appendListData(encodeList,n);  break;}
            }
        });          
        // EVASIVE ENCODING SECTION STOP
   

        // OPTIONS PANEL START
        JPanel optionsPanel = new JPanel();
        optionsPanel.setLayout(new BoxLayout(optionsPanel , BoxLayout.Y_AXIS));

        JPanel targetOSPanel = new JPanel();
        targetOSPanel.add(targetOSLabel);
        targetOSPanel.add(targetOSCombo);

        
        JPanel argumentPanel=new JPanel();
        argument = new JLabel("Command argument:");
        argumentField = new JTextArea(1,40);
        argumentField.setText("PAYLOAD_MARK.burpcollaboratorclientgenerateddomainhere");
       
        optionsPanel.add(targetOSPanel);        
        optionsPanel.add(argumentPanel);
        optionsPanel.add(argument);
        optionsPanel.add(argumentField);

        
        optionsPanel.add(encodeLabel);
        optionsPanel.add(encodeListScroller);
        optionsPanel.add(encodeRemoveButton);
        optionsPanel.add(encodeClearButton);
        optionsPanel.add(encodingsToUse);
        // END OF OPTIONS PANEL
        // TARGETS PANEL START
      
        // TARGETS PANEL STOP
        JPanel byteGeneratorPanel = new JPanel();
        
        JLabel byteGeneratorLabel = new JLabel();
        byteGeneratorLabel.setText("Byte generator range");
      
        JComboBox byteGeneratorRangeCombo = new JComboBox();       
        String[] byteRanges = { "Non-alphanumeric", "Alphanumeric", "Non-alphanumeric printable", "Non-alphanumeric non-printable","Non-alphanumeric non-printable < 128","All"};
        for (String byteRange : byteRanges) {
            byteGeneratorRangeCombo.addItem(byteRange);
        }
        this.byteGeneratorRange="non-alpha"; // this is the default
        byteGeneratorRangeCombo.addActionListener((ActionEvent e) -> {
            switch (byteGeneratorRangeCombo.getSelectedIndex()) {
                case 0:
                {
                    ShellingPanel.this.byteGeneratorRange = "non-alpha";
                    break;
                }
                case 1:
                {
                    ShellingPanel.this.byteGeneratorRange = "alpha";           
                    break;
                }
                case 2:
                {
                    ShellingPanel.this.byteGeneratorRange = "non-alpha-print";
                    break;
                }
                case 3:
                {
                    ShellingPanel.this.byteGeneratorRange = "non-alpha-non-print";
                    break;
                }
                case 4:
                {
                    ShellingPanel.this.byteGeneratorRange = "non-alpha-non-print-low";
                }
                case 5:
                {
                    ShellingPanel.this.byteGeneratorRange = "all";
                    break;
                }
            }
        });                
        byteGeneratorPanel.add(byteGeneratorLabel);
        byteGeneratorPanel.add(byteGeneratorRangeCombo);     
        byteGeneratorPanel.setLayout(new BoxLayout(byteGeneratorPanel,BoxLayout.Y_AXIS));
                
        JPanel rightPanel = new JPanel(); // the most-right panel to hold targets and byte-generator options
        
        // ADD PANELS TO THE MAIN SHELLING PANEL        

        rightPanel.add(byteGeneratorPanel);
        
        add(mainPanel,BorderLayout.NORTH);
        addHierarchyListener((HierarchyEvent evt) -> {
            SHELLING.ShellingTab.findTab();
        });        
    }
    public void logOutput(String msg)
    {
        //this.logOutput.append(msg);
        stdout.println(msg);
    }

}
